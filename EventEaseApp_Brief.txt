EventEaseApp - Feature Brief

1. Event Card with Validation

Purpose: Display and edit event details with validation.

Sample:
--------------------------------------------------
@using System.ComponentModel.DataAnnotations

<div class="card event-card">
    <div class="card-body">
        <h5 class="card-title">@eventModel.EventName</h5>
        <h6 class="card-subtitle mb-2 text-muted">@eventModel.EventDate?.ToString("MMMM dd, yyyy")</h6>
        <p class="card-text">@eventModel.Location</p>
    </div>
</div>
<EditForm Model="eventModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="event-card" style="border: 1px solid #ccc; padding: 16px; border-radius: 8px; margin-bottom: 12px;">
        <label>Event Name:</label>
        <InputText @bind-Value="eventModel.EventName" class="form-control" />
        <ValidationMessage For="@(() => eventModel.EventName)" />
        <br />
        <label>Date:</label>
        <InputDate @bind-Value="eventModel.EventDate" class="form-control" />
        <ValidationMessage For="@(() => eventModel.EventDate)" />
        <br />
        <label>Location:</label>
        <InputText @bind-Value="eventModel.Location" class="form-control" />
        <ValidationMessage For="@(() => eventModel.Location)" />
        <br />
        <button type="submit" class="btn btn-primary">Save Event</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public EventModel eventModel { get; set; }

    private void HandleValidSubmit()
    {
        // Handle valid form submission
    }
}

public class EventModel
{
    [Required(ErrorMessage = "Event Name is required.")]
    public string EventName { get; set; }

    [Required(ErrorMessage = "Event Date is required.")]
    [DataType(DataType.Date)]
    public DateTime? EventDate { get; set; }

    [Required(ErrorMessage = "Location is required.")]
    public string Location { get; set; }
}
--------------------------------------------------

2. Registration Form with Error Handling and Validation

Purpose: Register users with validation and error feedback.

Sample:
--------------------------------------------------
@page "/register"
@using System.ComponentModel.DataAnnotations
@inject UserSessionService UserSession

<EditForm Model="registrationModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Name:</label>
        <InputText @bind-Value="registrationModel.Name" class="form-control" />
        <ValidationMessage For="@(() => registrationModel.Name)" />
    </div>
    <div class="form-group">
        <label>Email:</label>
        <InputText @bind-Value="registrationModel.Email" class="form-control" />
        <ValidationMessage For="@(() => registrationModel.Email)" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-2">@errorMessage</div>
}
@if (isSuccess)
{
    <div class="alert alert-success mt-2">Registration successful!</div>
}
@if (UserSession.IsLoggedIn)
{
    <div class="alert alert-info mt-2">Welcome, @UserSession.UserName!</div>
}

@code {
    private RegistrationModel registrationModel = new();
    private string errorMessage;
    private bool isSuccess = false;

    private void HandleValidSubmit()
    {
        try
        {
            UserSession.Login(registrationModel.Name);
            isSuccess = true;
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Registration failed: {ex.Message}";
            isSuccess = false;
        }
    }

    public class RegistrationModel
    {
        [Required(ErrorMessage = "Name is required.")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; }
    }
}
--------------------------------------------------

3. User Session State Management

Purpose: Track user session and login status.

Sample:
--------------------------------------------------
public class UserSessionService
{
    public bool IsLoggedIn { get; private set; }
    public string UserName { get; private set; }

    public void Login(string userName)
    {
        UserName = userName;
        IsLoggedIn = true;
    }

    public void Logout()
    {
        UserName = null;
        IsLoggedIn = false;
    }
}
--------------------------------------------------
Register the service in Program.cs:
builder.Services.AddScoped<UserSessionService>();

4. Attendance Tracker

Purpose: Monitor event participation.

Sample:
--------------------------------------------------
@page "/attendance"
@using System.ComponentModel.DataAnnotations

<h3>Attendance Tracker</h3>

<EditForm Model="attendanceModel" OnValidSubmit="MarkAttendance">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Event Name:</label>
        <InputText @bind-Value="attendanceModel.EventName" class="form-control" />
        <ValidationMessage For="@(() => attendanceModel.EventName)" />
    </div>
    <div class="form-group">
        <label>Participant Name:</label>
        <InputText @bind-Value="attendanceModel.ParticipantName" class="form-control" />
        <ValidationMessage For="@(() => attendanceModel.ParticipantName)" />
    </div>
    <button type="submit" class="btn btn-success">Mark Attendance</button>
</EditForm>

@if (attendanceList.Any())
{
    <h4 class="mt-4">Attendance List</h4>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Event Name</th>
                <th>Participant Name</th>
                <th>Timestamp</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in attendanceList)
            {
                <tr>
                    <td>@record.EventName</td>
                    <td>@record.ParticipantName</td>
                    <td>@record.Timestamp.ToString("g")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private AttendanceModel attendanceModel = new();
    private List<AttendanceRecord> attendanceList = new();

    private void MarkAttendance()
    {
        attendanceList.Add(new AttendanceRecord
        {
            EventName = attendanceModel.EventName,
            ParticipantName = attendanceModel.ParticipantName,
            Timestamp = DateTime.Now
        });
        attendanceModel = new AttendanceModel(); // Reset form
    }

    public class AttendanceModel
    {
        [Required(ErrorMessage = "Event Name is required.")]
        public string EventName { get; set; }

        [Required(ErrorMessage = "Participant Name is required.")]
        public string ParticipantName { get; set; }
    }

    public class AttendanceRecord
    {
        public string EventName { get; set; }
        public string ParticipantName { get; set; }
        public DateTime Timestamp { get; set; }
    }
}
--------------------------------------------------

5. Routing and Error Handling

Purpose: Gracefully handle invalid paths.

Sample:
--------------------------------------------------
<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <div class="alert alert-warning mt-4" role="alert">
                <h3>Sorry, the page could not be found.</h3>
                <p>
                    The path you entered does not exist. 
                    <a href="/">Return to Home</a>
                </p>
            </div>
        </LayoutView>
    </NotFound>
</Router>
--------------------------------------------------

6. Performance and Reliability

- Used scoped services for session continuity.
- Used Blazor validation for responsive forms.
- Provided error handling and user feedback.
- Optimized component rendering with best practices.

If you need further customization or have more requirements, just let me know!